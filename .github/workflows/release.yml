name: 发布应用

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: '发布标签 (例如: v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  generate-updater:
    name: 生成更新清单
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 获取发布信息
        id: release
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${{ github.event.release.tag_name }}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT

      - name: 生成 Tauri 更新清单
        run: |
          cat > latest.json << EOF
          {
            "version": "${{ steps.release.outputs.version }}",
            "notes": "查看完整更新日志: https://github.com/${{ github.repository }}/releases/tag/${{ steps.release.outputs.tag }}",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "linux-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ steps.release.outputs.tag }}/imgtoss_${{ steps.release.outputs.version }}_amd64.AppImage"
              },
              "windows-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ steps.release.outputs.tag }}/imgtoss_${{ steps.release.outputs.version }}_x64_en-US.msi"
              },
              "darwin-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ steps.release.outputs.tag }}/imgtoss_${{ steps.release.outputs.version }}_x64.dmg"
              },
              "darwin-aarch64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ steps.release.outputs.tag }}/imgtoss_${{ steps.release.outputs.version }}_aarch64.dmg"
              }
            }
          }
          EOF

      - name: 上传更新清单到发布
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release.outputs.tag }}
          files: latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-users:
    name: 通知用户
    runs-on: ubuntu-latest
    needs: generate-updater
    if: github.event_name == 'release'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 发送发布通知
        run: |
          echo "🎉 ImgToss ${{ github.event.release.tag_name }} 已发布!"
          echo "📦 下载地址: ${{ github.event.release.html_url }}"
          echo "📝 更新日志: ${{ github.event.release.body }}"

      - name: 更新 README 徽章
        run: |
          # 这里可以添加自动更新 README 中版本徽章的逻辑
          echo "版本徽章将显示: ${{ github.event.release.tag_name }}"

  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 运行 Trivy 漏洞扫描
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 上传 Trivy 扫描结果
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  performance-test:
    name: 性能测试
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 构建应用
        run: pnpm run build

      - name: 分析 Bundle 大小
        run: |
          echo "## 📊 Bundle 分析报告" >> $GITHUB_STEP_SUMMARY
          echo "| 文件 | 大小 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find out -name "*.js" -exec ls -lh {} \; | awk '{print "| " $9 " | " $5 " |"}' >> $GITHUB_STEP_SUMMARY

      - name: Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          # 这里可以添加 Lighthouse 性能测试
          echo "性能测试完成 ✅"