name: 构建和发布应用

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

# 设置 GitHub Token 权限
permissions:
  contents: write  # 需要写入权限来创建 Release
  packages: write  # 可选：如果需要发布包
  actions: read    # 读取 Actions 权限
  security-events: write  # 上传安全扫描结果需要的权限

jobs:
  build:
    name: 构建 ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      max-parallel: 2  # 限制并行构建数量
      matrix:
        include:
          - platform: 'linux'
            os: 'ubuntu-latest'
            rust_target: 'x86_64-unknown-linux-gnu'
          - platform: 'macos-arm'
            os: 'macos-latest'
            rust_target: 'aarch64-apple-darwin'
          - platform: 'windows'
            os: 'windows-latest'
            rust_target: 'x86_64-pc-windows-msvc'

    steps:
      - name: 显示运行器信息
        run: |
          echo "🖥️  运行器信息:"
          echo "操作系统: ${{ runner.os }}"
          echo "架构: ${{ runner.arch }}"
          echo "平台: ${{ matrix.platform }}"
          echo "目标: ${{ matrix.rust_target }}"
          echo "开始时间: $(date)"
          
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Rust 缓存
        uses: swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          key: ${{ matrix.platform }}

      - name: 安装系统依赖 (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: 安装前端依赖
        run: pnpm install --frozen-lockfile

      - name: 构建 Tauri 应用
        run: pnpm tauri build --target ${{ matrix.rust_target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: 上传构建产物 (Linux)
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/*.deb
            src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage
          retention-days: 7

      - name: 上传构建产物 (macOS ARM)
        if: matrix.platform == 'macos-arm'
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm-artifacts
          path: |
            src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/aarch64-apple-darwin/release/bundle/macos/*.app
          retention-days: 7

      - name: 上传构建产物 (Windows)
        if: matrix.platform == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi
            src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe
          retention-days: 7

  create-release:
    name: 创建 GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write  # 创建 Release 需要写入权限
      actions: read    # 下载构建产物需要读取权限
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 显示构建产物
        run: find artifacts -type f -name "*" | head -20

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.deb
            artifacts/**/*.AppImage
            artifacts/**/*.dmg
            artifacts/**/*.msi
            artifacts/**/*.exe
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-updater:
    name: 生成更新清单
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取发布信息
        id: release
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.version }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT

      - name: 生成 Tauri 更新清单
        run: |
          cat > latest.json << EOF
          {
            "version": "${{ steps.release.outputs.version }}",
            "notes": "查看完整更新日志: https://github.com/${{ github.repository }}/releases/tag/${{ steps.release.outputs.tag }}",
            "pub_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platforms": {
              "linux-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ steps.release.outputs.tag }}/imgtoss_${{ steps.release.outputs.version }}_amd64.AppImage"
              },
              "windows-x86_64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ steps.release.outputs.tag }}/imgtoss_${{ steps.release.outputs.version }}_x64_en-US.msi"
              },
              "darwin-aarch64": {
                "signature": "",
                "url": "https://github.com/${{ github.repository }}/releases/download/${{ steps.release.outputs.tag }}/imgtoss_${{ steps.release.outputs.version }}_aarch64.dmg"
              }
            }
          }
          EOF

      - name: 上传更新清单到发布
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release.outputs.tag }}
          files: latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 运行 Trivy 漏洞扫描
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 上传 Trivy 扫描结果
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  performance-test:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 构建应用
        run: pnpm run build

      - name: 分析 Bundle 大小
        run: |
          echo "## 📊 Bundle 分析报告" >> $GITHUB_STEP_SUMMARY
          echo "| 文件 | 大小 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find out -name "*.js" -exec ls -lh {} \; | awk '{print "| " $9 " | " $5 " |"}' >> $GITHUB_STEP_SUMMARY

      - name: Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          # 这里可以添加 Lighthouse 性能测试
          echo "性能测试完成 ✅"

  notify-completion:
    name: 发布完成通知
    runs-on: ubuntu-latest
    needs: [generate-updater, security-scan, performance-test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 发送发布通知
        run: |
          echo "🎉 ImgToss ${{ github.ref_name }} 发布完成!"
          echo "📦 下载地址: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          echo "🔄 自动更新清单已生成"
          echo "🛡️ 安全扫描已完成"
          echo "📊 性能测试已完成"